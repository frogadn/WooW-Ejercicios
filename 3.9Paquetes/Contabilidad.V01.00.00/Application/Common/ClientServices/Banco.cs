// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServicioCliente
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated> 
// ------------------------------------------------------------------------------//
using WooW.Core;
using WooW.Core.Common;
using WooW.DTO; 
using ServiceStack;

namespace WooW.Model
{
    public partial class Banco
    {

        public static WoODataResponse<Banco> List(
            JsonApiClient Client, BancoList GetRequest)
        {
            return Client.Send<WoODataResponse<Banco>>(GetRequest);
        }

        public static async Task<WoODataResponse<Banco>> ListAsync(
            JsonApiClient Client, BancoList GetRequest)
        {
            return await Client.SendAsync<WoODataResponse<Banco>>(GetRequest);
        }

        public static Banco Get(
            JsonApiClient Client, BancoGet GetRequest)
        {
            return Client.Send<Banco>(GetRequest);
        }

        public static async Task<Banco> GetAsync(
            JsonApiClient Client, BancoGet GetRequest)
        {
            return await Client.SendAsync<Banco>(GetRequest);
        }

        public static Banco Get(
            JsonApiClient Client, string Id)
        {
            return Client.Send<Banco>(
                new BancoGet()
                {
                    Id = Id
                });
        }


        public static Banco GetCheck(
            JsonApiClient Client, string Id)
        {
            var oBanco = Client.Send<Banco>(
                new BancoGet()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oBanco, Id);

            return oBanco;
        }

        public static async Task<Banco> GetAsync(
            JsonApiClient Client, string Id)
        {
            return await Client.SendAsync<Banco>(
                new BancoGet()
                {
                    Id = Id
                });
        }

        public static async Task<Banco> GetCheckAsync(
            JsonApiClient Client, string Id)
        {
            var oBanco = await Client.SendAsync<Banco>(
                new BancoGet()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oBanco, Id);

            return oBanco;
        }
        

        public static Banco Single(
            JsonApiClient Client, BancoSingle SingleRequest)
        {
            return Client.Send<Banco>(SingleRequest);
        }

        public static async Task<Banco> SingleAsync(
            JsonApiClient Client, BancoSingle SingleRequest)
        {
            return await Client.SendAsync<Banco>(SingleRequest);
        }


        public static Banco Single(
            JsonApiClient Client, string Id)
        {
            return Client.Send<Banco>(
                new BancoSingle()
                {
                    Id = Id
                });
        }


        public static Banco SingleCheck(
            JsonApiClient Client, string Id)
        {
            var oBanco = Client.Send<Banco>(
                new BancoSingle()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oBanco, Id);

            return oBanco;
        }

        public static async Task<Banco> SingleAsync(
            JsonApiClient Client, string Id)
        {
            return await Client.SendAsync<Banco>(
                new BancoSingle()
                {
                    Id = Id
                });
        }

        public static async Task<Banco> SingleCheckAsync(
            JsonApiClient Client, string Id)
        {
            var oBanco = await Client.SendAsync<Banco>(
                new BancoSingle()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oBanco, Id);

            return oBanco;
        }



        public static Banco Post(
            JsonApiClient Client, BancoNuevo PostRequest)
        {
            return Client.Send<Banco>(PostRequest);
        }

        public static async Task<Banco> PostAsync(
            JsonApiClient Client, BancoNuevo PostRequest)
        {
            return await Client.SendAsync<Banco>(PostRequest);
        }

        public static Banco Put(
            JsonApiClient Client,  BancoActivar PatchRequest)
        {
            return Client.Put<Banco>(PatchRequest);
        }

        public static Banco Patch(
            JsonApiClient Client,  BancoActivar PatchRequest)
        {
            return Client.Patch<Banco>(PatchRequest);
        }

        public static async Task<Banco> PutAsync(
            JsonApiClient Client, BancoActivar PatchRequest)
        {
            return await Client.PutAsync<Banco>(PatchRequest);
        }

        public static async Task<Banco> PatchAsync(
            JsonApiClient Client, BancoActivar PatchRequest)
        {
            return await Client.PatchAsync<Banco>(PatchRequest);
        }

        public static Banco Put(
            JsonApiClient Client,  BancoSuspender PatchRequest)
        {
            return Client.Put<Banco>(PatchRequest);
        }

        public static Banco Patch(
            JsonApiClient Client,  BancoSuspender PatchRequest)
        {
            return Client.Patch<Banco>(PatchRequest);
        }

        public static async Task<Banco> PutAsync(
            JsonApiClient Client, BancoSuspender PatchRequest)
        {
            return await Client.PutAsync<Banco>(PatchRequest);
        }

        public static async Task<Banco> PatchAsync(
            JsonApiClient Client, BancoSuspender PatchRequest)
        {
            return await Client.PatchAsync<Banco>(PatchRequest);
        }

        public static Banco SoftDelete(
            JsonApiClient Client, BancoDarDeBaja PatchRequest)
        {
            return Client.Put<Banco>(PatchRequest);
        }

        public static async Task<Banco> SoftDeleteAsync(
            JsonApiClient Client, BancoDarDeBaja PatchRequest)
        {
            return await Client.PutAsync<Banco>(PatchRequest);
        }

        public static Banco Put(
            JsonApiClient Client,  BancoModificar PatchRequest)
        {
            return Client.Put<Banco>(PatchRequest);
        }

        public static Banco Patch(
            JsonApiClient Client,  BancoModificar PatchRequest)
        {
            return Client.Patch<Banco>(PatchRequest);
        }

        public static async Task<Banco> PutAsync(
            JsonApiClient Client, BancoModificar PatchRequest)
        {
            return await Client.PutAsync<Banco>(PatchRequest);
        }

        public static async Task<Banco> PatchAsync(
            JsonApiClient Client, BancoModificar PatchRequest)
        {
            return await Client.PatchAsync<Banco>(PatchRequest);
        }

        public static IList<Banco> Post(
            JsonApiClient Client, IList<BancoNuevo> PostRequest)
        {
            return Client.SendAll<Banco>(PostRequest);
        }

        public static async Task<IList<Banco>> PostAsync(
            JsonApiClient Client, IList<BancoNuevo> PostRequest)
        {
            return await Client.SendAllAsync<Banco>(PostRequest);
        }
        public static IList<Banco> Put(
            JsonApiClient Client, IList<BancoActivar> PatchRequest)
        {
            return Client.SendAll<Banco>(PatchRequest);
        }

        public static async Task<IList<Banco>> PutAsync(
            JsonApiClient Client, IList<BancoActivar> PatchRequest)
        {
            return await Client.SendAllAsync<Banco>(PatchRequest);
        }
        public static IList<Banco> Put(
            JsonApiClient Client, IList<BancoSuspender> PatchRequest)
        {
            return Client.SendAll<Banco>(PatchRequest);
        }

        public static async Task<IList<Banco>> PutAsync(
            JsonApiClient Client, IList<BancoSuspender> PatchRequest)
        {
            return await Client.SendAllAsync<Banco>(PatchRequest);
        }
        public static IList<Banco> SoftDelete(
            JsonApiClient Client, IList<BancoDarDeBaja> PatchRequest)
        {
            return Client.SendAll<Banco>(PatchRequest);
        }

        public static async Task<IList<Banco>> SoftDeleteAsync(
            JsonApiClient Client, IList<BancoDarDeBaja> PatchRequest)
        {
            return await Client.SendAllAsync<Banco>(PatchRequest);
        }

        public static IList<Banco> Put(
            JsonApiClient Client, IList<BancoModificar> PatchRequest)
        {
            return Client.SendAll<Banco>(PatchRequest);
        }

        public static async Task<IList<Banco>> PutAsync(
            JsonApiClient Client, IList<BancoModificar> PatchRequest)
        {
            return await Client.SendAllAsync<Banco>(PatchRequest);
        }

        public static Banco Delete(
            JsonApiClient Client, string Id)
        {
            return Client.Delete<Banco>(
                new BancoBorrar()
                {
                    Id = Id
                });
        }

        public static Banco Delete(
            JsonApiClient Client, BancoBorrar PatchRequest)
        {
            return Client.Delete<Banco>(PatchRequest);
        }

        public static async Task<Banco> DeleteAsync(
            JsonApiClient Client, BancoBorrar PatchRequest)
        {
            return await Client.DeleteAsync<Banco>(PatchRequest);
        }

        public static IList<Banco> Delete(
            JsonApiClient Client, IList<BancoBorrar> PatchRequest)
        {
            return Client.SendAll<Banco>(PatchRequest);
        }

        public static async Task<IList<Banco>> DeleteAsync(
            JsonApiClient Client, IList<BancoBorrar> PatchRequest)
        {
            return await Client.SendAllAsync<Banco>(PatchRequest);
        }
    }
}
