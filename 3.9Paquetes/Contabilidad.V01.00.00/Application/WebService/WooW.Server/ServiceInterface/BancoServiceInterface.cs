// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServiceInterface
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------//
using WooW.Core.Server;
using WooW.Core;
using WooW.Core.Common;
using WooW.DTO;
using WooW.Model;
using ServiceStack;
using ServiceStack.OrmLite;

namespace WooW.ServiceInterface
{
    public class BancoServiceInterface : Service
    {
        public IAutoQueryDb AutoQuery { get; set; }

#if DEBUG
        public object Get(BancoAutoQuery query)
        {
            var wotarget = new WoTargetConnection(Request, Db);
            var queryResult = AutoQuery.CreateQuery(query, Request, wotarget.Db);
            return AutoQuery.Execute(query, queryResult, wotarget.Db);
        }
#endif


        public WoODataResponse<dynamic> Get(BancoList ODataRequest)
        {
            return WoGenericService.ODataGet<Banco>(new WoTargetConnection(Request, Db), Request, ODataRequest, true);
        }

        public Banco Get(BancoGet GetRequest)
        {
            return Banco.Get(new WoTargetConnection(Request, Db), GetRequest, WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
        }

        public Banco Get(BancoSingle SingleRequest)
        {
            return Banco.Single(new WoTargetConnection(Request, Db), SingleRequest, WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
        }



        public Banco Post(BancoNuevo dtoRequest)
        {
            return Banco.Post(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco[] Post(BancoNuevo[] dtoRequests)
        {
            var list = new List<Banco>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Banco.Post(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

        public Banco Patch(BancoActivar dtoRequest)
        {
            return Banco.Patch(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco Put(BancoActivar dtoRequest)
        {
            return Banco.Put(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco[] Post(BancoActivar[] dtoRequests)
        {
            var list = new List<Banco>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Banco.Put(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

        public Banco Patch(BancoSuspender dtoRequest)
        {
            return Banco.Patch(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco Put(BancoSuspender dtoRequest)
        {
            return Banco.Put(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco[] Post(BancoSuspender[] dtoRequests)
        {
            var list = new List<Banco>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Banco.Put(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

        public Banco Put(BancoDarDeBaja dtoRequest)
        {
            return Banco.SoftDelete(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco[] Post(BancoDarDeBaja[] dtoRequests)
        {
            var list = new List<Banco>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Banco.SoftDelete(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

                public Banco Patch(BancoModificar dtoRequest)
        {
            return Banco.Patch(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco Put(BancoModificar dtoRequest)
        {
            return Banco.Put(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Banco[] Post(BancoModificar[] dtoRequests)
        {
            var list = new List<Banco>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Banco.Put(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }



        public Banco Delete(BancoBorrar dtoRequest)
        {
            return Banco.Delete(new WoTargetConnection(Request, Db), dtoRequest);  
        }

        public Banco[] Post(BancoBorrar[] dtoRequests)
        {
            var list = new List<Banco>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Banco.Delete(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }
    }
}
