// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServicioCliente
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated> 
// ------------------------------------------------------------------------------//
using WooW.Core;
using WooW.Core.Common;
using WooW.DTO; 
using ServiceStack;

namespace WooW.Model
{
    public partial class Empleado
    {

        public static WoODataResponse<Empleado> List(
            JsonApiClient Client, EmpleadoList GetRequest)
        {
            return Client.Send<WoODataResponse<Empleado>>(GetRequest);
        }

        public static async Task<WoODataResponse<Empleado>> ListAsync(
            JsonApiClient Client, EmpleadoList GetRequest)
        {
            return await Client.SendAsync<WoODataResponse<Empleado>>(GetRequest);
        }

        public static Empleado Get(
            JsonApiClient Client, EmpleadoGet GetRequest)
        {
            return Client.Send<Empleado>(GetRequest);
        }

        public static async Task<Empleado> GetAsync(
            JsonApiClient Client, EmpleadoGet GetRequest)
        {
            return await Client.SendAsync<Empleado>(GetRequest);
        }

        public static Empleado Get(
            JsonApiClient Client, string Id)
        {
            return Client.Send<Empleado>(
                new EmpleadoGet()
                {
                    Id = Id
                });
        }


        public static Empleado GetCheck(
            JsonApiClient Client, string Id)
        {
            var oEmpleado = Client.Send<Empleado>(
                new EmpleadoGet()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oEmpleado, Id);

            return oEmpleado;
        }

        public static async Task<Empleado> GetAsync(
            JsonApiClient Client, string Id)
        {
            return await Client.SendAsync<Empleado>(
                new EmpleadoGet()
                {
                    Id = Id
                });
        }

        public static async Task<Empleado> GetCheckAsync(
            JsonApiClient Client, string Id)
        {
            var oEmpleado = await Client.SendAsync<Empleado>(
                new EmpleadoGet()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oEmpleado, Id);

            return oEmpleado;
        }
        

        public static Empleado Single(
            JsonApiClient Client, EmpleadoSingle SingleRequest)
        {
            return Client.Send<Empleado>(SingleRequest);
        }

        public static async Task<Empleado> SingleAsync(
            JsonApiClient Client, EmpleadoSingle SingleRequest)
        {
            return await Client.SendAsync<Empleado>(SingleRequest);
        }


        public static Empleado Single(
            JsonApiClient Client, string Id)
        {
            return Client.Send<Empleado>(
                new EmpleadoSingle()
                {
                    Id = Id
                });
        }


        public static Empleado SingleCheck(
            JsonApiClient Client, string Id)
        {
            var oEmpleado = Client.Send<Empleado>(
                new EmpleadoSingle()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oEmpleado, Id);

            return oEmpleado;
        }

        public static async Task<Empleado> SingleAsync(
            JsonApiClient Client, string Id)
        {
            return await Client.SendAsync<Empleado>(
                new EmpleadoSingle()
                {
                    Id = Id
                });
        }

        public static async Task<Empleado> SingleCheckAsync(
            JsonApiClient Client, string Id)
        {
            var oEmpleado = await Client.SendAsync<Empleado>(
                new EmpleadoSingle()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oEmpleado, Id);

            return oEmpleado;
        }



        public static Empleado Post(
            JsonApiClient Client, EmpleadoNuevo PostRequest)
        {
            return Client.Send<Empleado>(PostRequest);
        }

        public static async Task<Empleado> PostAsync(
            JsonApiClient Client, EmpleadoNuevo PostRequest)
        {
            return await Client.SendAsync<Empleado>(PostRequest);
        }

        public static Empleado Put(
            JsonApiClient Client,  EmpleadoActivar PatchRequest)
        {
            return Client.Put<Empleado>(PatchRequest);
        }

        public static Empleado Patch(
            JsonApiClient Client,  EmpleadoActivar PatchRequest)
        {
            return Client.Patch<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> PutAsync(
            JsonApiClient Client, EmpleadoActivar PatchRequest)
        {
            return await Client.PutAsync<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> PatchAsync(
            JsonApiClient Client, EmpleadoActivar PatchRequest)
        {
            return await Client.PatchAsync<Empleado>(PatchRequest);
        }

        public static Empleado Put(
            JsonApiClient Client,  EmpleadoSuspender PatchRequest)
        {
            return Client.Put<Empleado>(PatchRequest);
        }

        public static Empleado Patch(
            JsonApiClient Client,  EmpleadoSuspender PatchRequest)
        {
            return Client.Patch<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> PutAsync(
            JsonApiClient Client, EmpleadoSuspender PatchRequest)
        {
            return await Client.PutAsync<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> PatchAsync(
            JsonApiClient Client, EmpleadoSuspender PatchRequest)
        {
            return await Client.PatchAsync<Empleado>(PatchRequest);
        }

        public static Empleado SoftDelete(
            JsonApiClient Client, EmpleadoDarDeBaja PatchRequest)
        {
            return Client.Put<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> SoftDeleteAsync(
            JsonApiClient Client, EmpleadoDarDeBaja PatchRequest)
        {
            return await Client.PutAsync<Empleado>(PatchRequest);
        }

        public static Empleado Put(
            JsonApiClient Client,  EmpleadoModificar PatchRequest)
        {
            return Client.Put<Empleado>(PatchRequest);
        }

        public static Empleado Patch(
            JsonApiClient Client,  EmpleadoModificar PatchRequest)
        {
            return Client.Patch<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> PutAsync(
            JsonApiClient Client, EmpleadoModificar PatchRequest)
        {
            return await Client.PutAsync<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> PatchAsync(
            JsonApiClient Client, EmpleadoModificar PatchRequest)
        {
            return await Client.PatchAsync<Empleado>(PatchRequest);
        }

        public static IList<Empleado> Post(
            JsonApiClient Client, IList<EmpleadoNuevo> PostRequest)
        {
            return Client.SendAll<Empleado>(PostRequest);
        }

        public static async Task<IList<Empleado>> PostAsync(
            JsonApiClient Client, IList<EmpleadoNuevo> PostRequest)
        {
            return await Client.SendAllAsync<Empleado>(PostRequest);
        }
        public static IList<Empleado> Put(
            JsonApiClient Client, IList<EmpleadoActivar> PatchRequest)
        {
            return Client.SendAll<Empleado>(PatchRequest);
        }

        public static async Task<IList<Empleado>> PutAsync(
            JsonApiClient Client, IList<EmpleadoActivar> PatchRequest)
        {
            return await Client.SendAllAsync<Empleado>(PatchRequest);
        }
        public static IList<Empleado> Put(
            JsonApiClient Client, IList<EmpleadoSuspender> PatchRequest)
        {
            return Client.SendAll<Empleado>(PatchRequest);
        }

        public static async Task<IList<Empleado>> PutAsync(
            JsonApiClient Client, IList<EmpleadoSuspender> PatchRequest)
        {
            return await Client.SendAllAsync<Empleado>(PatchRequest);
        }
        public static IList<Empleado> SoftDelete(
            JsonApiClient Client, IList<EmpleadoDarDeBaja> PatchRequest)
        {
            return Client.SendAll<Empleado>(PatchRequest);
        }

        public static async Task<IList<Empleado>> SoftDeleteAsync(
            JsonApiClient Client, IList<EmpleadoDarDeBaja> PatchRequest)
        {
            return await Client.SendAllAsync<Empleado>(PatchRequest);
        }

        public static IList<Empleado> Put(
            JsonApiClient Client, IList<EmpleadoModificar> PatchRequest)
        {
            return Client.SendAll<Empleado>(PatchRequest);
        }

        public static async Task<IList<Empleado>> PutAsync(
            JsonApiClient Client, IList<EmpleadoModificar> PatchRequest)
        {
            return await Client.SendAllAsync<Empleado>(PatchRequest);
        }

        public static Empleado Delete(
            JsonApiClient Client, string Id)
        {
            return Client.Delete<Empleado>(
                new EmpleadoBorrar()
                {
                    Id = Id
                });
        }

        public static Empleado Delete(
            JsonApiClient Client, EmpleadoBorrar PatchRequest)
        {
            return Client.Delete<Empleado>(PatchRequest);
        }

        public static async Task<Empleado> DeleteAsync(
            JsonApiClient Client, EmpleadoBorrar PatchRequest)
        {
            return await Client.DeleteAsync<Empleado>(PatchRequest);
        }

        public static IList<Empleado> Delete(
            JsonApiClient Client, IList<EmpleadoBorrar> PatchRequest)
        {
            return Client.SendAll<Empleado>(PatchRequest);
        }

        public static async Task<IList<Empleado>> DeleteAsync(
            JsonApiClient Client, IList<EmpleadoBorrar> PatchRequest)
        {
            return await Client.SendAllAsync<Empleado>(PatchRequest);
        }
    }
}
