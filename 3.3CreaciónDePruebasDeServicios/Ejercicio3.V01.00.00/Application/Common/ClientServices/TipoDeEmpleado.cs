// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServicioCliente
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated> 
// ------------------------------------------------------------------------------//
using WooW.Core;
using WooW.Core.Common;
using WooW.DTO; 
using ServiceStack;

namespace WooW.Model
{
    public partial class TipoDeEmpleado
    {

        public static WoODataResponse<TipoDeEmpleado> List(
            JsonApiClient Client, TipoDeEmpleadoList GetRequest)
        {
            return Client.Send<WoODataResponse<TipoDeEmpleado>>(GetRequest);
        }

        public static async Task<WoODataResponse<TipoDeEmpleado>> ListAsync(
            JsonApiClient Client, TipoDeEmpleadoList GetRequest)
        {
            return await Client.SendAsync<WoODataResponse<TipoDeEmpleado>>(GetRequest);
        }

        public static TipoDeEmpleado Get(
            JsonApiClient Client, TipoDeEmpleadoGet GetRequest)
        {
            return Client.Send<TipoDeEmpleado>(GetRequest);
        }

        public static async Task<TipoDeEmpleado> GetAsync(
            JsonApiClient Client, TipoDeEmpleadoGet GetRequest)
        {
            return await Client.SendAsync<TipoDeEmpleado>(GetRequest);
        }

        public static TipoDeEmpleado Get(
            JsonApiClient Client, string Id)
        {
            return Client.Send<TipoDeEmpleado>(
                new TipoDeEmpleadoGet()
                {
                    Id = Id
                });
        }


        public static TipoDeEmpleado GetCheck(
            JsonApiClient Client, string Id)
        {
            var oTipoDeEmpleado = Client.Send<TipoDeEmpleado>(
                new TipoDeEmpleadoGet()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oTipoDeEmpleado, Id);

            return oTipoDeEmpleado;
        }

        public static async Task<TipoDeEmpleado> GetAsync(
            JsonApiClient Client, string Id)
        {
            return await Client.SendAsync<TipoDeEmpleado>(
                new TipoDeEmpleadoGet()
                {
                    Id = Id
                });
        }

        public static async Task<TipoDeEmpleado> GetCheckAsync(
            JsonApiClient Client, string Id)
        {
            var oTipoDeEmpleado = await Client.SendAsync<TipoDeEmpleado>(
                new TipoDeEmpleadoGet()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oTipoDeEmpleado, Id);

            return oTipoDeEmpleado;
        }
        

        public static TipoDeEmpleado Single(
            JsonApiClient Client, TipoDeEmpleadoSingle SingleRequest)
        {
            return Client.Send<TipoDeEmpleado>(SingleRequest);
        }

        public static async Task<TipoDeEmpleado> SingleAsync(
            JsonApiClient Client, TipoDeEmpleadoSingle SingleRequest)
        {
            return await Client.SendAsync<TipoDeEmpleado>(SingleRequest);
        }


        public static TipoDeEmpleado Single(
            JsonApiClient Client, string Id)
        {
            return Client.Send<TipoDeEmpleado>(
                new TipoDeEmpleadoSingle()
                {
                    Id = Id
                });
        }


        public static TipoDeEmpleado SingleCheck(
            JsonApiClient Client, string Id)
        {
            var oTipoDeEmpleado = Client.Send<TipoDeEmpleado>(
                new TipoDeEmpleadoSingle()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oTipoDeEmpleado, Id);

            return oTipoDeEmpleado;
        }

        public static async Task<TipoDeEmpleado> SingleAsync(
            JsonApiClient Client, string Id)
        {
            return await Client.SendAsync<TipoDeEmpleado>(
                new TipoDeEmpleadoSingle()
                {
                    Id = Id
                });
        }

        public static async Task<TipoDeEmpleado> SingleCheckAsync(
            JsonApiClient Client, string Id)
        {
            var oTipoDeEmpleado = await Client.SendAsync<TipoDeEmpleado>(
                new TipoDeEmpleadoSingle()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(oTipoDeEmpleado, Id);

            return oTipoDeEmpleado;
        }



        public static TipoDeEmpleado Post(
            JsonApiClient Client, TipoDeEmpleadoNuevo PostRequest)
        {
            return Client.Send<TipoDeEmpleado>(PostRequest);
        }

        public static async Task<TipoDeEmpleado> PostAsync(
            JsonApiClient Client, TipoDeEmpleadoNuevo PostRequest)
        {
            return await Client.SendAsync<TipoDeEmpleado>(PostRequest);
        }

        public static TipoDeEmpleado Put(
            JsonApiClient Client,  TipoDeEmpleadoActivar PatchRequest)
        {
            return Client.Put<TipoDeEmpleado>(PatchRequest);
        }

        public static TipoDeEmpleado Patch(
            JsonApiClient Client,  TipoDeEmpleadoActivar PatchRequest)
        {
            return Client.Patch<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> PutAsync(
            JsonApiClient Client, TipoDeEmpleadoActivar PatchRequest)
        {
            return await Client.PutAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> PatchAsync(
            JsonApiClient Client, TipoDeEmpleadoActivar PatchRequest)
        {
            return await Client.PatchAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static TipoDeEmpleado Put(
            JsonApiClient Client,  TipoDeEmpleadoSuspender PatchRequest)
        {
            return Client.Put<TipoDeEmpleado>(PatchRequest);
        }

        public static TipoDeEmpleado Patch(
            JsonApiClient Client,  TipoDeEmpleadoSuspender PatchRequest)
        {
            return Client.Patch<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> PutAsync(
            JsonApiClient Client, TipoDeEmpleadoSuspender PatchRequest)
        {
            return await Client.PutAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> PatchAsync(
            JsonApiClient Client, TipoDeEmpleadoSuspender PatchRequest)
        {
            return await Client.PatchAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static TipoDeEmpleado SoftDelete(
            JsonApiClient Client, TipoDeEmpleadoDarDeBaja PatchRequest)
        {
            return Client.Put<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> SoftDeleteAsync(
            JsonApiClient Client, TipoDeEmpleadoDarDeBaja PatchRequest)
        {
            return await Client.PutAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static TipoDeEmpleado Put(
            JsonApiClient Client,  TipoDeEmpleadoModificar PatchRequest)
        {
            return Client.Put<TipoDeEmpleado>(PatchRequest);
        }

        public static TipoDeEmpleado Patch(
            JsonApiClient Client,  TipoDeEmpleadoModificar PatchRequest)
        {
            return Client.Patch<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> PutAsync(
            JsonApiClient Client, TipoDeEmpleadoModificar PatchRequest)
        {
            return await Client.PutAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> PatchAsync(
            JsonApiClient Client, TipoDeEmpleadoModificar PatchRequest)
        {
            return await Client.PatchAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static IList<TipoDeEmpleado> Post(
            JsonApiClient Client, IList<TipoDeEmpleadoNuevo> PostRequest)
        {
            return Client.SendAll<TipoDeEmpleado>(PostRequest);
        }

        public static async Task<IList<TipoDeEmpleado>> PostAsync(
            JsonApiClient Client, IList<TipoDeEmpleadoNuevo> PostRequest)
        {
            return await Client.SendAllAsync<TipoDeEmpleado>(PostRequest);
        }
        public static IList<TipoDeEmpleado> Put(
            JsonApiClient Client, IList<TipoDeEmpleadoActivar> PatchRequest)
        {
            return Client.SendAll<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<IList<TipoDeEmpleado>> PutAsync(
            JsonApiClient Client, IList<TipoDeEmpleadoActivar> PatchRequest)
        {
            return await Client.SendAllAsync<TipoDeEmpleado>(PatchRequest);
        }
        public static IList<TipoDeEmpleado> Put(
            JsonApiClient Client, IList<TipoDeEmpleadoSuspender> PatchRequest)
        {
            return Client.SendAll<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<IList<TipoDeEmpleado>> PutAsync(
            JsonApiClient Client, IList<TipoDeEmpleadoSuspender> PatchRequest)
        {
            return await Client.SendAllAsync<TipoDeEmpleado>(PatchRequest);
        }
        public static IList<TipoDeEmpleado> SoftDelete(
            JsonApiClient Client, IList<TipoDeEmpleadoDarDeBaja> PatchRequest)
        {
            return Client.SendAll<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<IList<TipoDeEmpleado>> SoftDeleteAsync(
            JsonApiClient Client, IList<TipoDeEmpleadoDarDeBaja> PatchRequest)
        {
            return await Client.SendAllAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static IList<TipoDeEmpleado> Put(
            JsonApiClient Client, IList<TipoDeEmpleadoModificar> PatchRequest)
        {
            return Client.SendAll<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<IList<TipoDeEmpleado>> PutAsync(
            JsonApiClient Client, IList<TipoDeEmpleadoModificar> PatchRequest)
        {
            return await Client.SendAllAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static TipoDeEmpleado Delete(
            JsonApiClient Client, string Id)
        {
            return Client.Delete<TipoDeEmpleado>(
                new TipoDeEmpleadoBorrar()
                {
                    Id = Id
                });
        }

        public static TipoDeEmpleado Delete(
            JsonApiClient Client, TipoDeEmpleadoBorrar PatchRequest)
        {
            return Client.Delete<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<TipoDeEmpleado> DeleteAsync(
            JsonApiClient Client, TipoDeEmpleadoBorrar PatchRequest)
        {
            return await Client.DeleteAsync<TipoDeEmpleado>(PatchRequest);
        }

        public static IList<TipoDeEmpleado> Delete(
            JsonApiClient Client, IList<TipoDeEmpleadoBorrar> PatchRequest)
        {
            return Client.SendAll<TipoDeEmpleado>(PatchRequest);
        }

        public static async Task<IList<TipoDeEmpleado>> DeleteAsync(
            JsonApiClient Client, IList<TipoDeEmpleadoBorrar> PatchRequest)
        {
            return await Client.SendAllAsync<TipoDeEmpleado>(PatchRequest);
        }
    }
}
