// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServiceInterface
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------//
using WooW.Core.Server;
using WooW.Core;
using WooW.Core.Common;
using WooW.DTO;
using WooW.Model;
using ServiceStack;
using ServiceStack.OrmLite;

namespace WooW.ServiceInterface
{
    public class EmpleadoServiceInterface : Service
    {
        public IAutoQueryDb AutoQuery { get; set; }

#if DEBUG
        public object Get(EmpleadoAutoQuery query)
        {
            var wotarget = new WoTargetConnection(Request, Db);
            var queryResult = AutoQuery.CreateQuery(query, Request, wotarget.Db);
            return AutoQuery.Execute(query, queryResult, wotarget.Db);
        }
#endif


        public WoODataResponse<dynamic> Get(EmpleadoList ODataRequest)
        {
            return WoGenericService.ODataGet<Empleado>(new WoTargetConnection(Request, Db), Request, ODataRequest, true);
        }

        public Empleado Get(EmpleadoGet GetRequest)
        {
            return Empleado.Get(new WoTargetConnection(Request, Db), GetRequest, WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
        }

        public Empleado Get(EmpleadoSingle SingleRequest)
        {
            return Empleado.Single(new WoTargetConnection(Request, Db), SingleRequest, WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
        }



        public Empleado Post(EmpleadoNuevo dtoRequest)
        {
            return Empleado.Post(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado[] Post(EmpleadoNuevo[] dtoRequests)
        {
            var list = new List<Empleado>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Empleado.Post(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

        public Empleado Patch(EmpleadoActivar dtoRequest)
        {
            return Empleado.Patch(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado Put(EmpleadoActivar dtoRequest)
        {
            return Empleado.Put(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado[] Post(EmpleadoActivar[] dtoRequests)
        {
            var list = new List<Empleado>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Empleado.Put(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

        public Empleado Patch(EmpleadoSuspender dtoRequest)
        {
            return Empleado.Patch(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado Put(EmpleadoSuspender dtoRequest)
        {
            return Empleado.Put(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado[] Post(EmpleadoSuspender[] dtoRequests)
        {
            var list = new List<Empleado>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Empleado.Put(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

        public Empleado Put(EmpleadoDarDeBaja dtoRequest)
        {
            return Empleado.SoftDelete(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado[] Post(EmpleadoDarDeBaja[] dtoRequests)
        {
            var list = new List<Empleado>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Empleado.SoftDelete(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

                public Empleado Patch(EmpleadoModificar dtoRequest)
        {
            return Empleado.Patch(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado Put(EmpleadoModificar dtoRequest)
        {
            return Empleado.Put(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public Empleado[] Post(EmpleadoModificar[] dtoRequests)
        {
            var list = new List<Empleado>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Empleado.Put(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }



        public Empleado Delete(EmpleadoBorrar dtoRequest)
        {
            return Empleado.Delete(new WoTargetConnection(Request, Db), dtoRequest);  
        }

        public Empleado[] Post(EmpleadoBorrar[] dtoRequests)
        {
            var list = new List<Empleado>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(Empleado.Delete(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }
    }
}
